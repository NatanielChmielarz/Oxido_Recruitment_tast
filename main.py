'''
Recruitment task from oxido. The aim of the task is to use OpenAi to convert an article into an HTML file from a given text file.
'''
from openai import OpenAI
from dotenv import load_dotenv
import os

load_dotenv()

client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"), 
)

input_file = "article_data.txt"
output_file = "artykul.html"
template_file = "szablon.html"
preview_file = "podglad.html"

# Funkcja odczytu pliku tekstowego
def read_article(file_path):
    """
    Reads the content of a text file.

    Args:
        file_path (str): The path to the text file.

    Returns:
        str: The content of the file if it exists.
        None: If the file does not exist, returns None.
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        print(f"Error: File {file_path} does not exist.")
        return None

# Funkcja generująca kod HTML za pomocą OpenAI
def generate_html_from_article(article_text):
    """
    Uses OpenAI to convert an article into structured HTML content.

    Args:
        article_text (str): The text of the article to be converted.

    Returns:
        str: The HTML content generated by OpenAI, including appropriate tags, 
        <img> placeholders, and <figcaption>.
    """
    prompt = (
        "Przetwórz poniższy artykuł na kod HTML. Zwróć kod zawierający tylko treść, "
        "bez znaczników <html>, <head>, <body>. Użyj odpowiednich tagów HTML "
        "do strukturyzacji takich jak <h1>,<h2> <p> i innych, które będą odpowiednie."
        "Dodaj znaczniki <img> w odpowiednich miejscach, "
        "z atrybutami src='image_placeholder.jpg' oraz alt zawierającym opis obrazu. "
        "Pod każdym obrazem dodaj podpis w tagu <figcaption>."
        "Upewnij się, że kod HTML jest poprawnie sformatowany i strukturalnie spójny. "
        "Oto artykuł:\n\n"
        + article_text
    )

    response = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model="gpt-3.5-turbo",
    )
    
    return response.choices[0].message.content


def save_to_file(file_path, content):
    """
    Saves content to a specified file.

    Args:
        file_path (str): The path to the file where the content will be saved.
        content (str): The content to save.
    """
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(content)

# Tworzenie pliku szablonu HTML
def create_html_template():
    """
    Creates a basic HTML template file with predefined styles and placeholders.
    Saves the template to the `template_file` path.
    """
    template = """
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Article templete</title>
    <style>
       body {
          font-family: 'Lora', serif; 
          line-height: 1.8;
          color: #333;
          background-color: #f7f7f7;
          margin: 0 auto;
          padding: 20px 10%;
        }
      
        h1 {
          color: #2c3e50;
          margin-top: 30px;
          margin-bottom: 15px;
        }
          h2 {
          color: #2c3e50;
          margin-top: 30px;
          margin-bottom: 15px;
        }
        p {
          font-size: 1rem;
          margin: 15px 0;
          text-align: justify;
        }
        img {
          max-width: 100%;
          height: auto;
          border-radius: 8px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
      
        figcaption {
          font-size: 0.9rem;
          font-style: italic;
          color: #7f8c8d;
          margin-top: 10px;
        }
    </style>
</head>
<body>
    <!-- Paste generated code -->
</body>
</html>
"""
    save_to_file(template_file, template)

def create_preview(content):
    """
    Inserts the provided content into a predefined HTML template to create a preview.

    Args:
        content (str): The HTML content to be embedded in the template.
    """
    with open(template_file, "r", encoding="utf-8") as template:
        template_html = template.read()
    preview_html = template_html.replace(
        "<!-- Paste generated code -->", content
    )
    save_to_file(preview_file, preview_html)

def main():
    """
    Main function orchestrating the process of:
    1. Reading the article from a file.
    2. Generating HTML content using OpenAI.
    3. Saving the HTML content to a file.
    4. Creating an HTML template.
    5. Generating a preview by embedding the HTML content into the template.
    """
    article_text = read_article(input_file)
    if not article_text:
        return

    html_content = generate_html_from_article(article_text)

    save_to_file(output_file, html_content)

    create_html_template()

    create_preview(html_content)

if __name__ == "__main__":
    main()
